version: '3.8'

services:
  # ================================
  # Main Application
  # ================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: goose-slackbot-app
    ports:
      - "3000:3000"
      - "9090:9090"  # Metrics port
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - HOST=0.0.0.0
      - PORT=3000
      - DATABASE_URL=postgresql://goose_user:goose_password@postgres:5432/goose_slackbot
      - REDIS_URL=redis://redis:6379/0
      - GOOSE_MCP_SERVER_URL=http://goose-mcp:8000
      # Slack configuration (set these in .env file)
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
      - SLACK_APP_TOKEN=${SLACK_APP_TOKEN}
      - SLACK_SIGNING_SECRET=${SLACK_SIGNING_SECRET}
      - SLACK_ADMIN_CHANNEL=${SLACK_ADMIN_CHANNEL:-}
      # Security (generate these for production)
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev-jwt-secret-key-change-in-production}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-dev-encryption-key-change-in-production}
      # Logging
      - LOG_LEVEL=DEBUG
      - LOG_FORMAT=console
      # Feature flags for development
      - ENABLE_QUERY_HISTORY=true
      - ENABLE_QUERY_SHARING=true
      - ENABLE_INTERACTIVE_BUTTONS=true
      - ENABLE_FILE_UPLOADS=true
      - MOCK_MODE=${MOCK_MODE:-false}
    volumes:
      - .:/app
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - goose-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "health_check.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ================================
  # PostgreSQL Database
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: goose-slackbot-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: goose_slackbot
      POSTGRES_USER: goose_user
      POSTGRES_PASSWORD: goose_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./init-db.sql:/docker-entrypoint-initdb.d/02-init.sql:ro
    networks:
      - goose-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U goose_user -d goose_slackbot"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # ================================
  # Redis Cache
  # ================================
  redis:
    image: redis:7-alpine
    container_name: goose-slackbot-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - goose-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  # ================================
  # Goose MCP Server (Mock for development)
  # ================================
  goose-mcp:
    image: nginx:alpine
    container_name: goose-mcp-mock
    ports:
      - "8000:80"
    volumes:
      - ./mock-goose-mcp.conf:/etc/nginx/conf.d/default.conf:ro
      - ./mock-responses:/usr/share/nginx/html:ro
    networks:
      - goose-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # Monitoring - Prometheus (Optional)
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: goose-slackbot-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - goose-network
    restart: unless-stopped
    profiles:
      - monitoring

  # ================================
  # Monitoring - Grafana (Optional)
  # ================================
  grafana:
    image: grafana/grafana:latest
    container_name: goose-slackbot-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - goose-network
    restart: unless-stopped
    profiles:
      - monitoring

  # ================================
  # Development Tools
  # ================================
  
  # Database Admin Interface
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: goose-slackbot-pgadmin
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@goose.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - goose-network
    restart: unless-stopped
    profiles:
      - dev-tools

  # Redis Admin Interface
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: goose-slackbot-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:redis_password
    networks:
      - goose-network
    restart: unless-stopped
    profiles:
      - dev-tools

# ================================
# Networks
# ================================
networks:
  goose-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# Volumes
# ================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local
