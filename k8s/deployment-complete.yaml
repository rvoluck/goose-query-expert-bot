# ================================
# Complete Kubernetes Deployment Configuration
# Includes app, database, redis, and monitoring
# ================================

---
apiVersion: v1
kind: Namespace
metadata:
  name: goose-slackbot
  labels:
    name: goose-slackbot
    environment: production

---
# ================================
# ConfigMaps
# ================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: goose-slackbot-config
  namespace: goose-slackbot
data:
  # Application Configuration
  ENVIRONMENT: "production"
  DEBUG: "false"
  HOST: "0.0.0.0"
  PORT: "3000"
  WORKERS: "4"
  
  # Database Configuration
  DATABASE_POOL_SIZE: "20"
  DATABASE_MAX_OVERFLOW: "40"
  
  # Redis Configuration
  REDIS_SESSION_TTL: "3600"
  REDIS_CACHE_TTL: "1800"
  
  # Goose Integration
  GOOSE_MCP_SERVER_URL: "http://goose-mcp-service:8000"
  GOOSE_MCP_TIMEOUT: "300"
  GOOSE_MAX_CONCURRENT_QUERIES: "20"
  
  # Snowflake Configuration
  SNOWFLAKE_WAREHOUSE: "COMPUTE_WH"
  SNOWFLAKE_DATABASE: "ANALYTICS"
  SNOWFLAKE_SCHEMA: "PUBLIC"
  
  # Logging & Monitoring
  LOG_LEVEL: "INFO"
  LOG_FORMAT: "json"
  METRICS_ENABLED: "true"
  METRICS_PORT: "9090"
  
  # Rate Limiting
  RATE_LIMIT_PER_USER_PER_MINUTE: "20"
  RATE_LIMIT_GLOBAL_PER_MINUTE: "200"
  
  # Feature Flags
  ENABLE_QUERY_HISTORY: "true"
  ENABLE_QUERY_SHARING: "true"
  ENABLE_INTERACTIVE_BUTTONS: "true"
  ENABLE_FILE_UPLOADS: "true"
  ENABLE_THREAD_MANAGEMENT: "true"
  ENABLE_USER_PERMISSIONS: "true"
  
  # Performance
  MAX_RESULT_ROWS: "10000"
  MAX_INLINE_ROWS: "10"
  QUERY_TIMEOUT_SECONDS: "300"
  MAX_FILE_SIZE_MB: "50"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: goose-slackbot
data:
  POSTGRES_DB: "goose_slackbot"
  POSTGRES_USER: "goose_user"
  POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
  PGDATA: "/var/lib/postgresql/data/pgdata"

---
# ================================
# Secrets (Template - Replace with actual secrets)
# ================================
apiVersion: v1
kind: Secret
metadata:
  name: goose-slackbot-secrets
  namespace: goose-slackbot
type: Opaque
stringData:
  # Slack Credentials
  SLACK_BOT_TOKEN: "xoxb-your-bot-token"
  SLACK_APP_TOKEN: "xapp-your-app-token"
  SLACK_SIGNING_SECRET: "your-signing-secret"
  SLACK_ADMIN_CHANNEL: "C01234567"
  
  # Security Keys
  JWT_SECRET_KEY: "your-jwt-secret-key-change-in-production"
  ENCRYPTION_KEY: "your-encryption-key-change-in-production"
  
  # Database Connection
  DATABASE_URL: "postgresql://goose_user:goose_password@postgres-service:5432/goose_slackbot"
  
  # Redis Connection
  REDIS_URL: "redis://:redis_password@redis-service:6379/0"
  
  # Snowflake Credentials
  SNOWFLAKE_ACCOUNT: "your-snowflake-account"
  SNOWFLAKE_USER: "your-snowflake-user"
  SNOWFLAKE_PASSWORD: "your-snowflake-password"
  
  # Optional: Sentry DSN
  SENTRY_DSN: ""
  
  # Optional: LDAP Configuration
  LDAP_SERVER: ""
  LDAP_BASE_DN: ""
  LDAP_BIND_USER: ""
  LDAP_BIND_PASSWORD: ""

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
  namespace: goose-slackbot
type: Opaque
stringData:
  POSTGRES_PASSWORD: "goose_password"

---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secrets
  namespace: goose-slackbot
type: Opaque
stringData:
  REDIS_PASSWORD: "redis_password"

---
# ================================
# Persistent Volume Claims
# ================================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data-pvc
  namespace: goose-slackbot
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-pvc
  namespace: goose-slackbot
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app-data-pvc
  namespace: goose-slackbot
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard

---
# ================================
# Service Account & RBAC
# ================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: goose-slackbot-sa
  namespace: goose-slackbot

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: goose-slackbot-role
  namespace: goose-slackbot
rules:
  - apiGroups: [""]
    resources: ["pods", "services", "configmaps"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: goose-slackbot-rolebinding
  namespace: goose-slackbot
subjects:
  - kind: ServiceAccount
    name: goose-slackbot-sa
    namespace: goose-slackbot
roleRef:
  kind: Role
  name: goose-slackbot-role
  apiGroup: rbac.authorization.k8s.io

---
# ================================
# Application Deployment
# ================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: goose-slackbot-app
  namespace: goose-slackbot
  labels:
    app: goose-slackbot
    component: app
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: goose-slackbot
      component: app
  template:
    metadata:
      labels:
        app: goose-slackbot
        component: app
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: goose-slackbot-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      initContainers:
      - name: wait-for-postgres
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z postgres-service 5432; do echo waiting for postgres; sleep 2; done']
      
      - name: wait-for-redis
        image: busybox:1.35
        command: ['sh', '-c', 'until nc -z redis-service 6379; do echo waiting for redis; sleep 2; done']
      
      - name: db-migration
        image: goose-slackbot:latest
        command: ['python', 'migrations.py', 'upgrade']
        envFrom:
        - configMapRef:
            name: goose-slackbot-config
        - secretRef:
            name: goose-slackbot-secrets
      
      containers:
      - name: app
        image: goose-slackbot:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        
        envFrom:
        - configMapRef:
            name: goose-slackbot-config
        - secretRef:
            name: goose-slackbot-secrets
        
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 2Gi
        
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        startupProbe:
          httpGet:
            path: /health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        
        volumeMounts:
        - name: app-data
          mountPath: /app/data
        - name: app-logs
          mountPath: /app/logs
        - name: tmp
          mountPath: /tmp
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: app-data
        persistentVolumeClaim:
          claimName: app-data-pvc
      - name: app-logs
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - goose-slackbot
                - key: component
                  operator: In
                  values:
                  - app
              topologyKey: kubernetes.io/hostname
      
      tolerations:
      - key: "app"
        operator: "Equal"
        value: "goose-slackbot"
        effect: "NoSchedule"

---
# ================================
# PostgreSQL Deployment
# ================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: goose-slackbot
  labels:
    app: goose-slackbot
    component: postgres
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: goose-slackbot
      component: postgres
  template:
    metadata:
      labels:
        app: goose-slackbot
        component: postgres
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - name: postgres
          containerPort: 5432
          protocol: TCP
        
        envFrom:
        - configMapRef:
            name: postgres-config
        - secretRef:
            name: postgres-secrets
        
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 2Gi
        
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U goose_user -d goose_slackbot
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U goose_user -d goose_slackbot
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
      
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data-pvc

---
# ================================
# Redis Deployment
# ================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: goose-slackbot
  labels:
    app: goose-slackbot
    component: redis
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: goose-slackbot
      component: redis
  template:
    metadata:
      labels:
        app: goose-slackbot
        component: redis
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --appendonly
        - "yes"
        - --maxmemory
        - "1gb"
        - --maxmemory-policy
        - "allkeys-lru"
        
        envFrom:
        - secretRef:
            name: redis-secrets
        
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        
        volumeMounts:
        - name: redis-data
          mountPath: /data
      
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-pvc

---
# ================================
# Services
# ================================
apiVersion: v1
kind: Service
metadata:
  name: goose-slackbot-service
  namespace: goose-slackbot
  labels:
    app: goose-slackbot
    component: app
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3000
    targetPort: 3000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: goose-slackbot
    component: app
  sessionAffinity: ClientIP

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: goose-slackbot
  labels:
    app: goose-slackbot
    component: postgres
spec:
  type: ClusterIP
  ports:
  - name: postgres
    port: 5432
    targetPort: 5432
    protocol: TCP
  selector:
    app: goose-slackbot
    component: postgres

---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: goose-slackbot
  labels:
    app: goose-slackbot
    component: redis
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP
  selector:
    app: goose-slackbot
    component: redis

---
# ================================
# Horizontal Pod Autoscaler
# ================================
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: goose-slackbot-hpa
  namespace: goose-slackbot
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: goose-slackbot-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 30
      selectPolicy: Max

---
# ================================
# Pod Disruption Budget
# ================================
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: goose-slackbot-pdb
  namespace: goose-slackbot
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: goose-slackbot
      component: app

---
# ================================
# Network Policy
# ================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: goose-slackbot-network-policy
  namespace: goose-slackbot
spec:
  podSelector:
    matchLabels:
      app: goose-slackbot
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: goose-slackbot
    - podSelector:
        matchLabels:
          app: goose-slackbot
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          component: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          component: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
